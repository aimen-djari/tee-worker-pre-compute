/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.palantir.docker' version '0.26.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'io.freefair.lombok' version '5.3.0'
}

repositories {
    // Use JCenter for resolving dependencies.
        jcenter()
    // iExec
    maven {
        url "https://nexus.iex.ec/repository/maven-public/"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
    //implementation files("../iexec-common/build/libs/iexec-common-${iexecCommonVersion}.jar")

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
}

def mainClass = 'com.iexec.worker.tee.pre.App'

//gradle run
application {
    // Define the main class for the application.
    mainClass = mainClass
}

// Jar with missing dependencies (app.jar)
jar {
    manifest {
        attributes(
                'Main-Class': mainClass
        )
    }
}

def app = 'app'
def fatJar = app + '-all.jar' //app-all.jar

// Jar with all dependencies (app-all.jar)
shadowJar {
    mainClassName = mainClass
    archiveBaseName.set(app)
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

docker {
    name 'docker.io/iexechub/' + rootProject.name + ':dev'
    dockerfile file('../docker/Dockerfile-local')
    files('build/libs/' + fatJar)
    buildArgs([JAR_PATH: fatJar ])
}
tasks.docker.dependsOn tasks.build

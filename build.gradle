/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
    id 'com.palantir.docker' version '0.26.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'io.freefair.lombok' version '5.3.0'
}

ext {
    ociImageBase = 'docker-regis.iex.ec/' + rootProject.name
    ociImageName = ociImageBase + ':dev'
    ociTeeImageName = ociImageBase + '-unlocked:dev'
    jarPathForOCI = relativePath(tasks.shadowJar.outputs.files.singleFile)
    mockitoVersion = '4.4.0'
    systemStubsVersion = '2.0.1'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    // iExec
    maven {
        url "https://docker-regis-adm.iex.ec/repository/maven-public/"
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    maven {
        url "https://nexus.intra.iex.ec/repository/maven-public/"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation "uk.org.webcompere:system-stubs-core:$systemStubsVersion"    // activates env var setting
    testImplementation "uk.org.webcompere:system-stubs-jupiter:$systemStubsVersion" // activates env var setting
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion" // activates mocking final classes/methods
}

sourceSets {
    itest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

tasks.withType(Tar) {
    enabled = false
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

def mainClass = 'com.iexec.worker.tee.pre.Main'

//gradle run
application {
    // Define the main class for the application.
    mainClass = mainClass
}

// Jar with missing dependencies (app.jar)
jar {
    manifest {
        attributes(
                'Main-Class': mainClass
        )
    }
}

def app = 'app'
def fatJar = "${app}-all.jar"

// Jar with all dependencies (app-all.jar)
shadowJar {
    mainClassName = mainClass
    archiveBaseName.set(app)
    archiveVersion.set('') // remove version from name
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

docker {
    name ociImageName
    dockerfile file('docker/Dockerfile.local')
    files('build/libs/' + fatJar)
    buildArgs([JAR_PATH: fatJar])
}
tasks.docker.dependsOn tasks.build

task buildImage {
    dependsOn tasks.docker
}

task buildTeeImage(type: Exec) {
    dependsOn buildImage
    environment 'IMG_FROM', ociImageName
    environment 'IMG_TO', ociTeeImageName
    commandLine 'docker/sconify.sh'
}

task itest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    dependsOn buildImage
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
}
